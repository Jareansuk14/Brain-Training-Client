import React, { useState, useEffect } from "react";
import {
  Card,
  Space,
  Typography,
  Button,
  message,
  Row,
  Col,
  Input,
} from "antd";
import { ClockCircleOutlined, TrophyOutlined } from "@ant-design/icons";
import styled from "@emotion/styled";
import confetti from "canvas-confetti";

const { Title, Text } = Typography;

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏°
const TEST_DATA = {
  // ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  memoryWords: [
    // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    "‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢",
    "‡∏™‡πâ‡∏°‡∏ï‡∏≥",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥",
    "‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô",
    "‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏£‡∏≤",
    "‡∏•‡∏≤‡∏ö",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å",
    "‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
    // ‡∏ú‡∏•‡πÑ‡∏°‡πâ
    "‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á",
    "‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß",
    "‡∏™‡πâ‡∏°‡πÇ‡∏≠",
    "‡∏°‡∏±‡∏á‡∏Ñ‡∏∏‡∏î",
    "‡∏•‡∏≥‡πÑ‡∏¢",
    "‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà",
    "‡πÄ‡∏á‡∏≤‡∏∞",
    "‡∏Å‡∏•‡πâ‡∏ß‡∏¢",
    "‡∏™‡∏±‡∏ö‡∏õ‡∏∞‡∏£‡∏î",
    // ‡∏™‡∏±‡∏ï‡∏ß‡πå
    "‡∏ä‡πâ‡∏≤‡∏á",
    "‡πÄ‡∏™‡∏∑‡∏≠",
    "‡∏•‡∏¥‡∏á",
    "‡∏ô‡∏Å",
    "‡∏õ‡∏•‡∏≤",
    "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢",
    "‡πÅ‡∏°‡∏ß",
    "‡∏™‡∏¥‡∏á‡πÇ‡∏ï",
    "‡∏Å‡∏ß‡∏≤‡∏á",
    "‡∏´‡∏°‡∏µ",
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    "‡∏ß‡∏±‡∏î",
    "‡∏ï‡∏•‡∏≤‡∏î",
    "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "‡∏™‡∏ß‡∏ô",
    "‡∏ó‡∏∞‡πÄ‡∏•",
    "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤",
    "‡∏ô‡πâ‡∏≥‡∏ï‡∏Å",
    "‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏•‡∏ß‡∏á",
    "‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå",
    "‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô",
    // ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
    "‡∏£‡πà‡∏°",
    "‡∏û‡∏±‡∏î",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤",
    "‡∏´‡∏°‡∏ß‡∏Å",
    "‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥",
    "‡∏à‡∏≤‡∏ô",
    "‡∏ä‡πâ‡∏≠‡∏ô",
    "‡πÇ‡∏ï‡πä‡∏∞",
    "‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ",
  ],

  // ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ
  shapes: [
    "‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°",
    "‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°",
    "‡∏ß‡∏á‡∏Å‡∏•‡∏°",
    "‡∏î‡∏≤‡∏ß",
    "‡∏´‡∏Å‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°",
    "‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Ç‡∏ô‡∏°‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å‡∏õ‡∏π‡∏ô",
    "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°",
    "‡∏´‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°",
    "‡∏ß‡∏á‡∏£‡∏µ",
    "‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏∏‡∏°‡∏â‡∏≤‡∏Å",
  ],

  colors: [
    "‡πÅ‡∏î‡∏á",
    "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß",
    "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô",
    "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á",
    "‡∏°‡πà‡∏ß‡∏á",
    "‡∏™‡πâ‡∏°",
    "‡∏ä‡∏°‡∏û‡∏π",
    "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•",
    "‡πÄ‡∏ó‡∏≤",
    "‡∏î‡∏≥",
  ],

  // items ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (emoji)
  countingItems: ["üçé", "üåü", "üéà", "üê∂", "üå∫", "üé®", "üé≠", "üé™", "üéØ", "üé≤"],

  // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå
  animalQuestions: [
    // ‡∏™‡∏±‡∏ï‡∏ß‡πå
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ö‡∏Å?",
      answers: ["‡∏ä‡πâ‡∏≤‡∏á", "‡∏õ‡∏•‡∏≤‡∏ß‡∏≤‡∏¨", "‡∏ô‡∏Å‡πÄ‡∏û‡∏ô‡∏Å‡∏ß‡∏¥‡∏ô", "‡πÅ‡∏°‡∏ß‡∏ô‡πâ‡∏≥"],
      correct: "‡∏ä‡πâ‡∏≤‡∏á",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡∏µ‡∏Å?",
      answers: ["‡∏á‡∏π", "‡∏ô‡∏Å", "‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏Å", "‡∏Å‡∏ö"],
      correct: "‡∏ô‡∏Å",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡πâ‡∏≥?",
      answers: ["‡∏õ‡∏•‡∏≤", "‡πÅ‡∏°‡∏ß", "‡πÑ‡∏Å‡πà", "‡∏´‡∏°‡∏π"],
      correct: "‡∏õ‡∏•‡∏≤",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏î‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£?",
      answers: ["‡πÄ‡∏™‡∏∑‡∏≠", "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢", "‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ", "‡πÅ‡∏°‡∏ß"],
      correct: "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏î‡∏°‡∏µ‡∏á‡∏ß‡∏á?",
      answers: ["‡∏ä‡πâ‡∏≤‡∏á", "‡∏°‡πâ‡∏≤", "‡∏ß‡∏±‡∏ß", "‡∏Ñ‡∏ß‡∏≤‡∏¢"],
      correct: "‡∏ä‡πâ‡∏≤‡∏á",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏î‡∏°‡∏µ‡∏õ‡∏µ‡∏Å?",
      answers: ["‡πÄ‡∏õ‡πá‡∏î", "‡∏´‡∏°‡∏π", "‡πÅ‡∏°‡∏ß", "‡∏ß‡∏±‡∏ß"],
      correct: "‡πÄ‡∏õ‡πá‡∏î",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏î‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡πâ‡∏≥?",
      answers: ["‡∏õ‡∏•‡∏≤‡πÇ‡∏•‡∏°‡∏≤", "‡∏™‡∏¥‡∏á‡πÇ‡∏ï", "‡πÑ‡∏Å‡πà", "‡πÅ‡∏°‡∏ß"],
      correct: "‡∏õ‡∏•‡∏≤‡πÇ‡∏•‡∏°‡∏≤",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏î‡∏°‡∏µ‡πÄ‡∏Ç‡∏≤?",
      answers: ["‡∏Å‡∏ß‡∏≤‡∏á", "‡∏´‡∏°‡∏π", "‡∏ä‡πâ‡∏≤‡∏á", "‡πÄ‡∏™‡∏∑‡∏≠"],
      correct: "‡∏Å‡∏ß‡∏≤‡∏á",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏î‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢?",
      answers: ["‡∏•‡∏¥‡∏á", "‡πÄ‡∏™‡∏∑‡∏≠", "‡∏™‡∏¥‡∏á‡πÇ‡∏ï", "‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ"],
      correct: "‡∏•‡∏¥‡∏á",
    },
    {
      question: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏î‡∏≠‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏Ç‡πà?",
      answers: ["‡πÄ‡∏ï‡πà‡∏≤", "‡πÅ‡∏°‡∏ß", "‡∏ä‡πâ‡∏≤‡∏á", "‡∏°‡πâ‡∏≤"],
      correct: "‡πÄ‡∏ï‡πà‡∏≤",
    },

    // ‡∏ú‡∏•‡πÑ‡∏°‡πâ
    {
      question: "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏î‡∏°‡∏µ‡∏´‡∏ô‡∏≤‡∏°?",
      answers: ["‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á", "‡∏™‡πâ‡∏°", "‡πÅ‡∏ï‡∏á‡πÇ‡∏°"],
      correct: "‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    },
    {
      question: "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏î‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á?",
      answers: ["‡∏Å‡∏•‡πâ‡∏ß‡∏¢", "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á", "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", "‡∏≠‡∏á‡∏∏‡πà‡∏ô"],
      correct: "‡∏Å‡∏•‡πâ‡∏ß‡∏¢",
    },
    {
      question: "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏î‡∏°‡∏µ‡∏£‡∏™‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß?",
      answers: ["‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", "‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß", "‡∏Ç‡∏ô‡∏∏‡∏ô"],
      correct: "‡∏°‡∏∞‡∏ô‡∏≤‡∏ß",
    },
    {
      question: "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏ô‡∏≤‡∏ß?",
      answers: ["‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á", "‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏°‡∏∞‡∏•‡∏∞‡∏Å‡∏≠"],
      correct: "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•",
    },
    {
      question: "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏î‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å?",
      answers: ["‡πÅ‡∏ï‡∏á‡πÇ‡∏°", "‡∏•‡∏≥‡πÑ‡∏¢", "‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà", "‡∏°‡∏±‡∏á‡∏Ñ‡∏∏‡∏î"],
      correct: "‡πÅ‡∏ï‡∏á‡πÇ‡∏°",
    },

    // ‡∏™‡∏µ
    {
      question: "‡∏™‡∏µ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤?",
      answers: ["‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡∏ä‡∏°‡∏û‡∏π", "‡∏°‡πà‡∏ß‡∏á"],
      correct: "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô",
    },
    {
      question: "‡∏™‡∏µ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÑ‡∏°‡πâ?",
      answers: ["‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡πÅ‡∏î‡∏á", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "‡∏°‡πà‡∏ß‡∏á"],
      correct: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß",
    },
    {
      question: "‡∏™‡∏µ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå?",
      answers: ["‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "‡∏ü‡πâ‡∏≤", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡∏°‡πà‡∏ß‡∏á"],
      correct: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á",
    },
    {
      question: "‡∏™‡∏µ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å?",
      answers: ["‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡πÅ‡∏î‡∏á", "‡∏°‡πà‡∏ß‡∏á"],
      correct: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á",
    },
    {
      question: "‡∏™‡∏µ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏î?",
      answers: ["‡πÅ‡∏î‡∏á", "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á"],
      correct: "‡πÅ‡∏î‡∏á",
    },

    // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    {
      question: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô?",
      answers: ["‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°", "‡∏ï‡πâ‡∏°‡∏¢‡∏≥", "‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤", "‡∏™‡πâ‡∏°‡∏ï‡∏≥"],
      correct: "‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°",
    },
    {
      question: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏î‡∏ó‡∏≥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß?",
      answers: ["‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î", "‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ", "‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤", "‡πÅ‡∏Æ‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå"],
      correct: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î",
    },
    {
      question: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•?",
      answers: ["‡∏Å‡∏∏‡πâ‡∏á", "‡πÑ‡∏Å‡πà", "‡∏´‡∏°‡∏π", "‡∏ß‡∏±‡∏ß"],
      correct: "‡∏Å‡∏∏‡πâ‡∏á",
    },
    {
      question: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏î‡∏°‡∏µ‡∏£‡∏™‡πÄ‡∏ú‡πá‡∏î?",
      answers: ["‡∏ï‡πâ‡∏°‡∏¢‡∏≥", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°", "‡∏™‡∏•‡∏±‡∏î", "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á"],
      correct: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥",
    },
    {
      question: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏î‡∏Å‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤?",
      answers: ["‡πÇ‡∏à‡πä‡∏Å", "‡∏ï‡πâ‡∏°‡∏¢‡∏≥", "‡∏™‡πâ‡∏°‡∏ï‡∏≥", "‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤"],
      correct: "‡πÇ‡∏à‡πä‡∏Å",
    },

    // ‡∏û‡∏≤‡∏´‡∏ô‡∏∞
    {
      question: "‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÉ‡∏î‡∏ß‡∏¥‡πà‡∏á‡∏ö‡∏ô‡∏£‡∏≤‡∏á?",
      answers: ["‡∏£‡∏ñ‡πÑ‡∏ü", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡∏£‡∏ñ‡∏ï‡∏π‡πâ", "‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå"],
      correct: "‡∏£‡∏ñ‡πÑ‡∏ü",
    },
    {
      question: "‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÉ‡∏î‡∏°‡∏µ‡∏™‡∏≠‡∏á‡∏•‡πâ‡∏≠?",
      answers: ["‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡∏£‡∏ñ‡∏ö‡∏±‡∏™", "‡πÄ‡∏£‡∏∑‡∏≠"],
      correct: "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô",
    },
    {
      question: "‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏¥‡∏ô‡∏ö‡∏ô‡∏ü‡πâ‡∏≤?",
      answers: ["‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô", "‡πÄ‡∏£‡∏∑‡∏≠", "‡∏£‡∏ñ‡πÑ‡∏ü", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"],
      correct: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô",
    },
    {
      question: "‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÉ‡∏î‡πÅ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ô‡πâ‡∏≥?",
      answers: ["‡πÄ‡∏£‡∏∑‡∏≠", "‡∏£‡∏ñ‡πÑ‡∏ü", "‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå", "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô"],
      correct: "‡πÄ‡∏£‡∏∑‡∏≠",
    },
    {
      question: "‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤?",
      answers: ["‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡∏£‡∏ñ‡∏°‡πâ‡∏≤", "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô", "‡πÄ‡∏£‡∏∑‡∏≠‡πÉ‡∏ö"],
      correct: "‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
    },

    // ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
    {
      question: "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏õ‡πà‡∏ß‡∏¢?",
      answers: ["‡∏´‡∏°‡∏≠", "‡∏Ñ‡∏£‡∏π", "‡∏ï‡∏≥‡∏£‡∏ß‡∏à", "‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤"],
      correct: "‡∏´‡∏°‡∏≠",
    },
    {
      question: "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏î‡∏™‡∏≠‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠?",
      answers: ["‡∏Ñ‡∏£‡∏π", "‡∏´‡∏°‡∏≠", "‡∏ó‡∏´‡∏≤‡∏£", "‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤"],
      correct: "‡∏Ñ‡∏£‡∏π",
    },
    {
      question: "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏î‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß?",
      answers: ["‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤", "‡∏ä‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏á", "‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏°‡∏≠"],
      correct: "‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤",
    },
    {
      question: "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏î‡∏à‡∏±‡∏ö‡∏õ‡∏•‡∏≤?",
      answers: ["‡∏ä‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏á", "‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤", "‡∏Ñ‡∏£‡∏π", "‡∏ó‡∏´‡∏≤‡∏£"],
      correct: "‡∏ä‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏á",
    },
    {
      question: "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á?",
      answers: ["‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏°‡∏≠", "‡∏Ñ‡∏£‡∏π", "‡∏ó‡∏´‡∏≤‡∏£"],
      correct: "‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤",
    },

    // ‡∏Å‡∏µ‡∏¨‡∏≤
    {
      question: "‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•?",
      answers: ["‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•", "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", "‡∏°‡∏ß‡∏¢", "‡∏ß‡∏¥‡πà‡∏á"],
      correct: "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
    },
    {
      question: "‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ô‡πâ‡∏≥?",
      answers: ["‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", "‡∏ß‡∏¥‡πà‡∏á", "‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•", "‡∏°‡∏ß‡∏¢"],
      correct: "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥",
    },
    {
      question: "‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πâ‡∏ï‡∏µ?",
      answers: ["‡πÄ‡∏ö‡∏™‡∏ö‡∏≠‡∏•", "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•", "‡∏ß‡∏¥‡πà‡∏á", "‡∏°‡∏ß‡∏¢"],
      correct: "‡πÄ‡∏ö‡∏™‡∏ö‡∏≠‡∏•",
    },
    {
      question: "‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏Ç‡πà‡∏≤‡∏¢?",
      answers: ["‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•", "‡∏°‡∏ß‡∏¢", "‡∏ß‡∏¥‡πà‡∏á", "‡∏¢‡∏π‡πÇ‡∏î"],
      correct: "‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
    },
    {
      question: "‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ç‡πâ‡∏≤?",
      answers: ["‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•", "‡∏°‡∏ß‡∏¢", "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", "‡∏¢‡∏π‡πÇ‡∏î"],
      correct: "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
    },

    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    {
      question: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏õ‡πà‡∏ß‡∏¢?",
      answers: ["‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏ï‡∏•‡∏≤‡∏î", "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞"],
      correct: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
    },
    {
      question: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á?",
      answers: ["‡∏ï‡∏•‡∏≤‡∏î", "‡∏ß‡∏±‡∏î", "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"],
      correct: "‡∏ï‡∏•‡∏≤‡∏î",
    },
    {
      question: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠?",
      answers: ["‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏ï‡∏•‡∏≤‡∏î", "‡∏ß‡∏±‡∏î"],
      correct: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    },
    {
      question: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢?",
      answers: ["‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", "‡∏ï‡∏•‡∏≤‡∏î", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏ß‡∏±‡∏î"],
      correct: "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
    },
    {
      question: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç?",
      answers: ["‡∏ß‡∏±‡∏î", "‡∏ï‡∏•‡∏≤‡∏î", "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"],
      correct: "‡∏ß‡∏±‡∏î",
    },

    // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    {
      question: "‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô?",
      answers: ["‡∏î‡∏¥‡∏ô‡∏™‡∏≠", "‡∏à‡∏≤‡∏ô", "‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥", "‡∏´‡∏°‡∏≠‡∏ô"],
      correct: "‡∏î‡∏¥‡∏ô‡∏™‡∏≠",
    },
    {
      question: "‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏ô‡∏≠‡∏ô?",
      answers: ["‡πÄ‡∏ï‡∏µ‡∏¢‡∏á", "‡πÇ‡∏ï‡πä‡∏∞", "‡∏ï‡∏π‡πâ", "‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ"],
      correct: "‡πÄ‡∏ï‡∏µ‡∏¢‡∏á",
    },
    {
      question: "‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß?",
      answers: ["‡∏ä‡πâ‡∏≠‡∏ô", "‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£", "‡∏î‡∏¥‡∏ô‡∏™‡∏≠", "‡πÑ‡∏°‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î"],
      correct: "‡∏ä‡πâ‡∏≠‡∏ô",
    },
    {
      question: "‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î?",
      answers: ["‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£", "‡∏î‡∏¥‡∏ô‡∏™‡∏≠", "‡∏ä‡πâ‡∏≠‡∏ô", "‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥"],
      correct: "‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£",
    },
    {
      question: "‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥?",
      answers: ["‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥", "‡∏à‡∏≤‡∏ô", "‡∏ä‡πâ‡∏≠‡∏ô", "‡∏™‡πâ‡∏≠‡∏°"],
      correct: "‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥",
    },
  ],
};

// Color map for ShapeDisplay
const COLOR_MAP = {
  ‡πÅ‡∏î‡∏á: "#ff4d4f",
  ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß: "#52c41a",
  ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô: "#1890ff",
  ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á: "#fadb14",
  ‡∏°‡πà‡∏ß‡∏á: "#722ed1",
  ‡∏™‡πâ‡∏°: "#fa8c16",
  ‡∏ä‡∏°‡∏û‡∏π: "#eb2f96",
  ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•: "#8b4513",
  ‡πÄ‡∏ó‡∏≤: "#8c8c8c",
  ‡∏î‡∏≥: "#000000",
};

// Shape styles for ShapeDisplay
const SHAPE_STYLES = {
  ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°: "clip-path: polygon(50% 0%, 0% 100%, 100% 100%);",
  ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°: "border-radius: 0;",
  ‡∏ß‡∏á‡∏Å‡∏•‡∏°: "border-radius: 50%;",
  ‡∏î‡∏≤‡∏ß: `clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);`,
  ‡∏´‡∏Å‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°:
    "clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);",
  ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Ç‡∏ô‡∏°‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å‡∏õ‡∏π‡∏ô: "transform: rotate(45deg);",
  ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°: "border-radius: 100px 100px 0 0;",
  ‡∏´‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°:
    "clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);",
  ‡∏ß‡∏á‡∏£‡∏µ: "border-radius: 50%; transform: scaleX(1.5);",
  ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏∏‡∏°‡∏â‡∏≤‡∏Å: "clip-path: polygon(0% 0%, 0% 100%, 100% 100%);",
};

// Color Constants
const COLORS = {
  primary: "#7c3aed", // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
  secondary: "#a78bfa", // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
  background: "#7c3aed10", // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å
  dark: "#1f2937", // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
  light: "#f8fafc", // ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ô‡∏ß‡∏•
  shadow: "rgba(17, 12, 46, 0.1)",
};

// Styled Components
const PageContainer = styled.div`
  min-height: 100vh;
  background: linear-gradient(135deg, ${COLORS.background}, white);
  padding: 40px 24px;
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: fixed;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(
      circle,
      ${COLORS.background} 0%,
      transparent 70%
    );
    animation: rotate 60s linear infinite;
    z-index: -1;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
`;

const ContentContainer = styled.div`
  max-width: 800px;
  margin: 0 auto;
  width: 100%;
  position: relative;
  z-index: 1;
`;

const StyledCard = styled(Card)`
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  border: none;
  box-shadow: 0 4px 24px ${COLORS.shadow},
    inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  margin-bottom: 24px;
  transition: transform 0.3s ease;

  .ant-card-body {
    padding: 32px;
  }
`;

const Timer = styled.div`
  position: fixed;
  top: 20px;
  right: 20px;
  background: white;
  padding: 12px 24px;
  border-radius: 8px;
  box-shadow: 0 4px 24px ${COLORS.shadow};
  font-size: 18px;
  font-weight: bold;
  z-index: 100;
  display: flex;
  align-items: center;
  gap: 8px;

  svg {
    color: ${COLORS.primary};
  }
`;

const Score = styled.div`
  position: fixed;
  top: 20px;
  left: 20px;
  background: white;
  padding: 12px 24px;
  border-radius: 8px;
  box-shadow: 0 4px 24px ${COLORS.shadow};
  font-size: 18px;
  font-weight: bold;
  z-index: 100;
  display: flex;
  align-items: center;
  gap: 8px;

  svg {
    color: ${COLORS.primary};
  }
`;

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á styled components
const GameStats = styled.div`
  position: fixed;
  top: 80px;
  left: 20px;
  background: white;
  padding: 16px 24px;
  border-radius: 16px;
  box-shadow: 0 4px 24px ${COLORS.shadow};
  font-size: 16px;
  z-index: 100;
  min-width: 200px;

  .stat-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px 0;

    &:first-child {
      border-bottom: 1px solid ${COLORS.background};
      padding-bottom: 12px;
    }

    &:last-child {
      padding-top: 12px;
    }

    .icon {
      color: ${COLORS.primary};
      font-size: 20px;
    }

    .label {
      color: ${COLORS.dark};
      opacity: 0.8;
      font-size: 14px;
      margin-bottom: 4px;
    }

    .value {
      font-weight: bold;
      color: ${COLORS.dark};
      font-size: 16px;
    }

    .score {
      font-weight: bold;
      .correct {
        color: #52c41a;
      }
      .total {
        color: ${COLORS.dark};
        opacity: 0.6;
      }
    }
  }
`;

const AnswerButton = styled(Button)`
  width: 100%;
  height: 56px;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 500;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 2px solid transparent;
  background: ${COLORS.light};
  color: ${COLORS.dark};
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);

  &:hover:not([disabled]) {
    transform: translateY(-2px);
    background: white;
    border-color: ${COLORS.primary};
    color: ${COLORS.primary};
    box-shadow: 0 4px 12px rgba(124, 58, 237, 0.1);
  }

  &:active:not([disabled]) {
    transform: translateY(0);
  }

  &.correct {
    background: linear-gradient(135deg, #52c41a, #389e0d);
    border-color: #52c41a;
    color: white;
    box-shadow: 0 4px 12px rgba(82, 196, 26, 0.2);

    &::after {
      content: "‚úì";
      margin-left: 8px;
      font-weight: bold;
    }
  }

  &.wrong {
    background: linear-gradient(135deg, #ff4d4f, #cf1322);
    border-color: #ff4d4f;
    color: white;
    box-shadow: 0 4px 12px rgba(255, 77, 79, 0.2);

    &::after {
      content: "‚úó";
      margin-left: 8px;
      font-weight: bold;
    }
  }

  &[disabled] {
    opacity: 0.7;
    cursor: not-allowed;
  }
`;

const QuestionCard = styled(StyledCard)`
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, ${COLORS.primary}, ${COLORS.secondary});
  }

  .stats-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 24px;
    background: ${COLORS.background};
    border-radius: 12px;
    margin-bottom: 24px;

    .stat-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 4px;
      padding: 8px 16px;
      position: relative;

      &:first-of-type::after {
        content: "";
        position: absolute;
        right: -10px;
        top: 50%;
        transform: translateY(-50%);
        width: 2px;
        height: 70%;
        background: rgba(124, 58, 237, 0.2);
      }

      .stat-label {
        font-size: 14px;
        color: ${COLORS.dark};
        opacity: 0.7;
      }

      .stat-value {
        font-size: 24px;
        font-weight: 600;
        color: ${COLORS.primary};
        display: flex;
        align-items: baseline;
        gap: 2px;

        .total {
          font-size: 16px;
          opacity: 0.5;
        }
      }
    }
  }

  .question-header {
    text-align: center;
    margin-bottom: 32px;

    .question-text {
      font-size: 24px;
      color: ${COLORS.dark};
      font-weight: 600;
      margin: 0;
    }
  }

  .question-content {
    background: ${COLORS.background};
    padding: 32px;
    border-radius: 16px;
    margin: 24px 0;
    display: flex;
    justify-content: center;
    align-items: center;

    &.counting {
      font-size: 2.5rem;
      letter-spacing: 8px;
    }
  }

  .options-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    padding: 16px 0;
  }
`;

const StyledInput = styled(Input)`
  height: 48px;
  border-radius: 8px;
  border: 2px solid #e2e8f0;

  &:focus {
    border-color: ${COLORS.primary};
    box-shadow: 0 0 0 2px ${COLORS.background};
  }
`;

const ActionButton = styled(Button)`
  min-width: 120px;
  height: 44px;
  border-radius: 8px;
  font-weight: 500;

  &.primary {
    background: ${COLORS.primary};
    border-color: ${COLORS.primary};
    color: white;

    &:hover {
      background: ${COLORS.secondary};
      border-color: ${COLORS.secondary};
    }
  }
`;

const AnswerResult = styled.div`
  padding: 16px;
  border-radius: 12px;
  background: ${(props) =>
    props.isCorrect ? "rgba(82, 196, 26, 0.1)" : "rgba(255, 77, 79, 0.1)"};
  border: 1px solid ${(props) => (props.isCorrect ? "#b7eb8f" : "#ffa39e")};
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  gap: 12px;

  .number {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: ${(props) => (props.isCorrect ? "#52c41a" : "#ff4d4f")};
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
  }

  .answer-text {
    color: ${COLORS.dark};
    font-size: 16px;
  }
`;

const CorrectAnswersSection = styled.div`
  margin-top: 32px;
  padding: 24px;
  background: ${COLORS.background};
  border-radius: 12px;
  text-align: center;

  .title {
    color: ${COLORS.primary};
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 16px;
  }

  .answers-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 12px;
  }

  .answer-item {
    background: white;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 16px;
    color: ${COLORS.dark};
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;

    &.correct {
      background: #52c41a;
      color: white;
      box-shadow: 0 2px 8px rgba(82, 196, 26, 0.2);
    }
  }
`;

const SummaryCard = styled(StyledCard)`
  .summary-header {
    text-align: center;
    margin-bottom: 32px;

    .total-score {
      font-size: 48px;
      color: ${COLORS.primary};
      font-weight: bold;
      margin: 16px 0;

      .total {
        color: ${COLORS.dark};
        opacity: 0.5;
      }
    }
  }
`;

const ShapeDisplay = styled.div`
  width: 200px;
  height: 200px;
  margin: 20px auto;
  display: flex;
  align-items: center;
  justify-content: center;
  ${({ shape, color }) => `
    background-color: ${COLOR_MAP[color]};
    ${SHAPE_STYLES[shape]}
  `}
`;

// Celebration Effects
const celebrateCorrect = () => {
  confetti({
    particleCount: 100,
    spread: 70,
    origin: { y: 0.6 },
  });
};

const celebrateComplete = () => {
  const duration = 3000;
  const end = Date.now() + duration;

  const frame = () => {
    confetti({
      particleCount: 7,
      angle: 60,
      spread: 55,
      origin: { x: 0 },
      colors: ["#ff0000", "#00ff00", "#0000ff"],
    });

    confetti({
      particleCount: 7,
      angle: 120,
      spread: 55,
      origin: { x: 1 },
      colors: ["#ff0000", "#00ff00", "#0000ff"],
    });

    if (Date.now() < end) {
      requestAnimationFrame(frame);
    }
  };

  frame();
};

// Generate Questions
// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
const generateUniqueOptions = (correctAnswer, possibleAnswers, count = 4) => {
  const options = new Set([correctAnswer]);
  const remaining = possibleAnswers.filter(
    (answer) => answer !== correctAnswer
  );

  while (options.size < count && remaining.length > 0) {
    const randomIndex = Math.floor(Math.random() * remaining.length);
    options.add(remaining[randomIndex]);
    remaining.splice(randomIndex, 1);
  }

  return Array.from(options).sort(() => Math.random() - 0.5);
};

const generateQuestion = () => {
  const questionTypes = ["math", "counting", "shape", "color", "animal"];
  const type = questionTypes[Math.floor(Math.random() * questionTypes.length)];

  switch (type) {
    case "math":
      const operations = ["+", "-", "√ó"];
      const op = operations[Math.floor(Math.random() * operations.length)];
      let num1, num2, answer;

      switch (op) {
        case "+":
          num1 = Math.floor(Math.random() * 20) + 1;
          num2 = Math.floor(Math.random() * 20) + 1;
          answer = num1 + num2;
          break;
        case "-":
          num1 = Math.floor(Math.random() * 20) + 10;
          num2 = Math.floor(Math.random() * num1);
          answer = num1 - num2;
          break;
        case "√ó":
          num1 = Math.floor(Math.random() * 10) + 1;
          num2 = Math.floor(Math.random() * 10) + 1;
          answer = num1 * num2;
          break;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
      const mathOptions = new Set([answer]);
      while (mathOptions.size < 4) {
        const offset = Math.floor(Math.random() * 10) - 5;
        if (offset !== 0) {
          mathOptions.add(answer + offset);
        }
      }

      return {
        type: "math",
        question: `${num1} ${op} ${num2} = ?`,
        options: Array.from(mathOptions).sort(() => Math.random() - 0.5),
        answer,
      };

    case "counting":
      const item =
        TEST_DATA.countingItems[
          Math.floor(Math.random() * TEST_DATA.countingItems.length)
        ];
      const count = Math.floor(Math.random() * 8) + 3;
      const display = Array(count).fill(item).join(" ");

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö
      const countOptions = new Set([count]);
      while (countOptions.size < 4) {
        const offset = Math.floor(Math.random() * 3) + 1;
        countOptions.add(count + offset);
        countOptions.add(count - offset);
      }

      return {
        type: "counting",
        question: `‡∏°‡∏µ${item}‡∏Å‡∏µ‡πà‡∏≠‡∏±‡∏ô?`,
        display,
        options: Array.from(countOptions)
          .slice(0, 4)
          .sort(() => Math.random() - 0.5),
        answer: count,
      };

    case "shape":
      const shape =
        TEST_DATA.shapes[Math.floor(Math.random() * TEST_DATA.shapes.length)];
      const color =
        TEST_DATA.colors[Math.floor(Math.random() * TEST_DATA.colors.length)];

      return {
        type: "shape",
        question: "‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏≠‡∏∞‡πÑ‡∏£?",
        shape,
        color,
        options: generateUniqueOptions(shape, TEST_DATA.shapes),
        answer: shape,
      };

    case "color":
      const colorQ =
        TEST_DATA.colors[Math.floor(Math.random() * TEST_DATA.colors.length)];
      const shapeQ =
        TEST_DATA.shapes[Math.floor(Math.random() * TEST_DATA.shapes.length)];

      return {
        type: "color",
        question: "‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏≠‡∏∞‡πÑ‡∏£?",
        shape: shapeQ,
        color: colorQ,
        options: generateUniqueOptions(colorQ, TEST_DATA.colors),
        answer: colorQ,
      };

    case "animal":
      const animalQ =
        TEST_DATA.animalQuestions[
          Math.floor(Math.random() * TEST_DATA.animalQuestions.length)
        ];
      return {
        type: "animal",
        question: animalQ.question,
        options: animalQ.answers,
        answer: animalQ.correct,
      };

    default:
      return generateQuestion();
  }
};

// Main Component
export default function MemoryTest() {
  // States
  const [stage, setStage] = useState("intro"); // intro, memorize, game, recall
  const [memoryWords, setMemoryWords] = useState([]);
  const [timer, setTimer] = useState(null);
  const [timeLeft, setTimeLeft] = useState(0);
  const [gameScore, setGameScore] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [answers, setAnswers] = useState(["", "", "", "", ""]);
  const [showAnswers, setShowAnswers] = useState(false);
  const [answeredQuestions, setAnsweredQuestions] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showResults, setShowResults] = useState(false);
  const [selectedOptions, setSelectedOptions] = useState([]);
  const [availableOptions, setAvailableOptions] = useState([]);

  useEffect(() => {
    if (stage === "recall") {
      // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (5 ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥)
      const correctWords = [...memoryWords];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
      const remainingWords = TEST_DATA.memoryWords.filter(
        (word) => !correctWords.includes(word)
      );

      // ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å 5 ‡∏Ñ‡∏≥
      const randomIncorrectWords = remainingWords
        .sort(() => Math.random() - 0.5)
        .slice(0, 5);

      // ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      const allOptions = [...correctWords, ...randomIncorrectWords].sort(
        () => Math.random() - 0.5
      );

      setAvailableOptions(allOptions);
    }
  }, [stage, memoryWords]);

  // Initialize memory words
  useEffect(() => {
    const shuffled = [...TEST_DATA.memoryWords].sort(() => Math.random() - 0.5);
    setMemoryWords(shuffled.slice(0, 5));
  }, []);

  // Timer for memorization phase
  useEffect(() => {
    if (stage === "memorize") {
      setTimeLeft(15);
      const interval = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            clearInterval(interval);
            setStage("game");
            setCurrentQuestion(generateQuestion());
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [stage]);

  // Timer for game phase
  useEffect(() => {
    if (stage === "game") {
      setTimeLeft(300); // 5 minutes
      const interval = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            clearInterval(interval);
            setStage("recall");
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [stage]);

  // Format time display
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  // Handle game answer
  const handleGameAnswer = (selected) => {
    setSelectedAnswer(selected);
    setShowResults(true);
    setAnsweredQuestions((prev) => prev + 1);

    const isCorrect = selected === currentQuestion.answer;
    if (isCorrect) {
      setCorrectAnswers((prev) => prev + 1);
      celebrateCorrect();
      message.success("‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
    } else {
      message.error("‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    setTimeout(() => {
      setSelectedAnswer(null);
      setShowResults(false);
      setCurrentQuestion(generateQuestion());
    }, 2000);
  };

  // Render functions
  const renderIntro = () => (
    <StyledCard>
      <Space
        direction="vertical"
        size={24}
        style={{ width: "100%", textAlign: "center" }}
      >
        <Title level={2} style={{ color: COLORS.primary, marginBottom: 0 }}>
          ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ MoCA
        </Title>

        <Text style={{ fontSize: "16px", color: COLORS.dark }}>
          ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏≥ 5 ‡∏Ñ‡∏≥ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
          ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏Ñ‡∏≥‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ
        </Text>

        <div style={{ marginTop: "24px" }}>
          <ActionButton
            className="primary"
            size="large"
            onClick={() => setStage("memorize")}
          >
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          </ActionButton>
        </div>
      </Space>
    </StyledCard>
  );

  const renderMemorize = () => (
    <StyledCard>
      <Space
        direction="vertical"
        size={24}
        style={{ width: "100%", textAlign: "center" }}
      >
        <Title level={2} style={{ color: COLORS.primary, marginBottom: 0 }}>
          ‡∏à‡∏≥‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ
        </Title>

        <Timer>
          <ClockCircleOutlined />
          {timeLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        </Timer>

        <div
          style={{
            background: COLORS.background,
            padding: "32px",
            borderRadius: "12px",
            marginTop: "24px",
          }}
        >
          {memoryWords.map((word, index) => (
            <Title
              level={2}
              key={index}
              style={{
                color: COLORS.dark,
                marginBottom: index === memoryWords.length - 1 ? 0 : "24px",
              }}
            >
              {word}
            </Title>
          ))}
        </div>
      </Space>
    </StyledCard>
  );

  const renderGame = () => (
    <QuestionCard>
      <div className="stats-container">
        <div className="stat-item">
          <div className="stat-label">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠</div>
          <div className="stat-value">{formatTime(timeLeft)}</div>
        </div>
        <div className="stat-item">
          <div className="stat-label">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</div>
          <div className="stat-value">
            {correctAnswers}
            <span className="total">/{answeredQuestions}</span>
          </div>
        </div>
      </div>

      <div className="question-header">
        <h2 className="question-text">{currentQuestion.question}</h2>
      </div>

      {(currentQuestion.type === "shape" ||
        currentQuestion.type === "color") && (
        <div className="question-content">
          <ShapeDisplay
            shape={currentQuestion.shape}
            color={currentQuestion.color}
          />
        </div>
      )}

      {currentQuestion.type === "counting" && (
        <div className="question-content counting">
          {currentQuestion.display}
        </div>
      )}

      <div className="options-grid">
        {currentQuestion.options.map((option, index) => (
          <AnswerButton
            key={index}
            onClick={() => !showResults && handleGameAnswer(option)}
            disabled={showResults}
            className={
              showResults
                ? option === currentQuestion.answer
                  ? "correct"
                  : selectedAnswer === option
                  ? "wrong"
                  : ""
                : ""
            }
          >
            {option}
          </AnswerButton>
        ))}
      </div>
    </QuestionCard>
  );

  const renderRecall = () => (
    <SummaryCard>
      <Space direction="vertical" size={24} style={{ width: "100%" }}>
        <div className="summary-header">
          <Title level={2} style={{ color: COLORS.primary, marginBottom: 0 }}>
            ‡∏à‡∏≥‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?
          </Title>
          {showAnswers && (
            <div className="total-score">
              {
                selectedOptions.filter((answer) => memoryWords.includes(answer))
                  .length
              }
              <span className="total">/5</span>
            </div>
          )}
        </div>

        {!showAnswers ? (
          <>
            <div style={{ marginBottom: "16px", textAlign: "center" }}>
              <Text>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÑ‡∏î‡πâ ({selectedOptions.length}/5)</Text>
            </div>

            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(2, 1fr)",
                gap: "12px",
                marginBottom: "24px",
              }}
            >
              {availableOptions.map((option) => (
                <AnswerButton
                  key={option}
                  onClick={() => {
                    if (selectedOptions.includes(option)) {
                      setSelectedOptions((prev) =>
                        prev.filter((item) => item !== option)
                      );
                    } else if (selectedOptions.length < 5) {
                      setSelectedOptions((prev) => [...prev, option]);
                    }
                  }}
                  className={selectedOptions.includes(option) ? "selected" : ""}
                  style={{
                    backgroundColor: selectedOptions.includes(option)
                      ? COLORS.primary
                      : "white",
                    color: selectedOptions.includes(option)
                      ? "white"
                      : COLORS.dark,
                  }}
                >
                  {option}
                </AnswerButton>
              ))}
            </div>

            <ActionButton
              className="primary"
              size="large"
              style={{ width: "100%" }}
              disabled={selectedOptions.length !== 5}
              onClick={() => {
                const correct = selectedOptions.filter((answer) =>
                  memoryWords.includes(answer)
                ).length;
                setAnswers(selectedOptions);
                setShowAnswers(true);
                message.info(`‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÑ‡∏î‡πâ ${correct} ‡∏Ñ‡∏≥ ‡∏à‡∏≤‡∏Å 5 ‡∏Ñ‡∏≥`);
                celebrateComplete();
              }}
            >
              {selectedOptions.length !== 5
                ? `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å ${5 - selectedOptions.length} ‡∏Ñ‡∏≥`
                : "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"}
            </ActionButton>
          </>
        ) : (
          <>
            <div style={{ marginBottom: "24px" }}>
              {selectedOptions.map((answer, index) => {
                const isCorrect = memoryWords.includes(answer);
                return (
                  <AnswerResult key={index} isCorrect={isCorrect}>
                    <span className="number">{index + 1}</span>
                    <span className="answer-text">{answer}</span>
                  </AnswerResult>
                );
              })}
            </div>

            <CorrectAnswersSection>
              <div className="title">‡∏Ñ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥</div>
              <div className="answers-grid">
                {memoryWords.map((word, index) => {
                  const isAnsweredCorrectly = selectedOptions.includes(word);
                  return (
                    <div
                      key={index}
                      className={`answer-item ${
                        isAnsweredCorrectly ? "correct" : ""
                      }`}
                    >
                      {word}
                    </div>
                  );
                })}
              </div>
            </CorrectAnswersSection>

            <Space direction="vertical" size={12} style={{ width: "100%" }}>
              <ActionButton
                className="primary"
                size="large"
                style={{ width: "100%" }}
                onClick={() => window.location.reload()}
              >
                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
              </ActionButton>
              <Button
                size="large"
                style={{ width: "100%" }}
                onClick={() => navigate("/")}
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </Button>
            </Space>
          </>
        )}
      </Space>
    </SummaryCard>
  );

  return (
    <PageContainer>
      <ContentContainer>
        {stage === "intro" && renderIntro()}
        {stage === "memorize" && renderMemorize()}
        {stage === "game" && renderGame()}
        {stage === "recall" && renderRecall()}
      </ContentContainer>
    </PageContainer>
  );
}
